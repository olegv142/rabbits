# -*- coding: utf-8 -*-
#
# Лисы - кролики
# R - популяция кроликов
# F - популяция лис
# Скорость рождения кроликов:
#  B(R) = a * (R / (1 + R1/R)) * (1 - R/Rs)
#    a  - коэффициент пропорциональности
#    R1 - порог одиночества
#    Rs - порог насыщения популяции (емкость среды)
# Скорость отлова кроликов лисами:
#  H(R,F) = c * F / (1 + Rh / (R - R0))
#    c  - коэффициент пропорциональности 
#    Rh - порог насыщения хищников
#    R0 - порог неуловимости
# Скорости изменения популяций:
#  R' = B - H
#  F' = d * H - b * F
#    d - коэффициент конверсии съеденных кроликов в новых лис
#    b - смертность лис
#

a = 1./20    # один кролик рождается в среднем раз в 20 дней
b = 1./3000  # лиса живет в среднем 3000 дней
c = 1./2     # лисе хватает одного кролика на 2 дня
d = 1./200   # чтобы выросла новая лиса, нужно съесть 200 кроликов
R0 = .1      # этих кроликов невозможно поймать
R1 = 1.      # при меньшем количестве крольчихе трудно найти партнера
Rh = 50.     # при таком количестве кроликов происходит насыщение хищников
Rs = 100.    # столько кроликов выедают всю траву, и популяция перестает расти

# Equilibrium
R_e = R0 + Rh / (d*c/b - 1)
F_e = (a/c) * R_e * (1 - R_e/Rs) * (1 + Rh/(R_e - R0)) / (1 + R1/R_e)

# Time quantum
dt = .1

def population_up(R, F):
	B = a * (R / (1 + R1/R)) * (1 - R/Rs)
	H = c * F / (1 + Rh / (R - R0))
	vR = B - H
	vF = d * H - b * F
	return R + vR * dt, F + vF * dt

import matplotlib.pyplot as pl

R = R_e + 0.001
F = F_e
t = 0.
R_ = []
F_ = []
t_ = []
while t < 50000:
	R, F = population_up(R, F)
	R_.append(R)
	F_.append(F)
	t_.append(t)
	t += dt

pl.plot(t_, R_, label='rabbits')
pl.plot(t_, F_, label='foxes')
pl.legend()
pl.show()



